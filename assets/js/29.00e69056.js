(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{431:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[e._v('This post documents the common git workflows when working in open source projects. Although it is still simplified,\nit is better than using "add-commit-push" workflow.')])]),e._v(" "),a("h1",{attrs:{id:"basic-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-concepts"}},[e._v("#")]),e._v(" Basic Concepts")]),e._v(" "),a("p",[e._v("There are 3 different regions in git:")]),e._v(" "),a("ul",[a("li",[e._v("Remote: this is the remote repository")]),e._v(" "),a("li",[e._v("Local: this is the local repository (stored in .git folder)")]),e._v(" "),a("li",[e._v("Staging: this is a temporary region for uncommitted changes.")]),e._v(" "),a("li",[e._v("Disk: this is the file system (physical files)")])]),e._v(" "),a("h1",{attrs:{id:"git-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow"}},[e._v("#")]),e._v(" Git Workflow")]),e._v(" "),a("h2",{attrs:{id:"start-from-remote-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-from-remote-repository"}},[e._v("#")]),e._v(" Start from remote repository")]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("git clone")]),e._v(" to make a copy of the remote repository to your local.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone remote-main.git\n")])])]),a("p",[e._v("Don't directly make changes to the main branch on the local. Instead, create a new branch.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'my-feature'")]),e._v("\n")])])]),a("p",[e._v('Now all changes will be made to the "my-feature" branch.')]),e._v(" "),a("h2",{attrs:{id:"make-changes-on-local"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-changes-on-local"}},[e._v("#")]),e._v(" Make changes on local")]),e._v(" "),a("p",[e._v("After making changes to the local files. It is recommended to use "),a("code",[e._v("git diff")]),e._v(" to see what changes were made.")]),e._v(" "),a("p",[e._v("After that, use "),a("code",[e._v("git add <my-change>")]),e._v(" to add the changes to the staging area.")]),e._v(" "),a("p",[e._v('So far, all changes happened in the "Disk" region. My local git knows nothing about the changes.\nTo inform the local git about the change, use '),a("code",[e._v("git commit")])]),e._v(" "),a("h2",{attrs:{id:"push-changes-to-remote"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-changes-to-remote"}},[e._v("#")]),e._v(" Push changes to remote")]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("git push")]),e._v(" to add the new feature branch to the remote repository.")]),e._v(" "),a("p",[a("code",[e._v("git push origin my-feature")])]),e._v(" "),a("p",[e._v("What usually happens is that after you push the new branch, there are new updates to the main branch (on remote). To test to see if my-feature still works after the new update.\nFirst on the local repository, switch to the main branch:")]),e._v(" "),a("p",[a("code",[e._v("git checkout main")])]),e._v(" "),a("p",[e._v("At this time, the local main branch still knows nothing about the remote update. To sync the local main to remote main, use "),a("code",[e._v("git pull origin main")]),e._v("\nBecause we don't make any changes on our local mian, it shouldn't be problem to pull all updates")]),e._v(" "),a("p",[e._v("Now we go back to my-feature branch, we can use "),a("code",[e._v("git rebase")]),e._v(" to merge updates from main.")]),e._v(" "),a("p",[a("code",[e._v("git rebase main")])]),e._v(" "),a("p",[e._v("There will be a possibility that there is a rebase conflict. In such case, you will need to resolve the conflict manually.")]),e._v(" "),a("p",[e._v('After rebase, the "my-feature" branch on the local git has both the new added feature and the remote update. It\'s ready to update the remote "my-feature" again\nSince I\'m the only one working on the "my-feature" branch, I can use '),a("code",[e._v("--force")]),e._v(" push the new changes to remote "),a("code",[e._v("my-feature")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" origin my-feature\n")])])]),a("h2",{attrs:{id:"pull-feature-branch-to-main-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-feature-branch-to-main-branch"}},[e._v("#")]),e._v(" Pull feature branch to main branch")]),e._v(" "),a("p",[e._v('Pull request means ask the owner of the main branch to merge changes from "my-feature" to main. It is recommended to use "squash and merge".\nLastly, we can clean up the feature branch. The feature branch will be deleted from the remote repository.')]),e._v(" "),a("p",[e._v("On the local git, we will first switch to the main branch")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n")])])]),a("p",[e._v('Now delete the local "my-feature" branch too:')]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-D")]),e._v(" my-feature\n")])])]),a("p",[e._v("Lastly, update the local main branch")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull origin master\n")])])]),a("h1",{attrs:{id:"undo-changes-in-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-changes-in-git"}},[e._v("#")]),e._v(" Undo changes in Git")]),e._v(" "),a("h2",{attrs:{id:"undo-changes-on-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-changes-on-disk"}},[e._v("#")]),e._v(" Undo changes on disk")]),e._v(" "),a("p",[e._v("If a change hasn't been added to the staging area, (showing as red when "),a("code",[e._v("git status")]),e._v("). Both of the following will undo the changed files.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("changed-file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or equivalently in newer version of git")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" restore "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("changed-file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n")])])]),a("h2",{attrs:{id:"undo-changes-in-staging-region"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-changes-in-staging-region"}},[e._v("#")]),e._v(" Undo changes in staging region")]),e._v(" "),a("p",[e._v("After "),a("code",[e._v("git add")]),e._v(", the changed file will show as green. Use the following to undo the changes:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# only remove file out of staging ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("changed_file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or equivalently")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" restore "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--staged")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("changed_file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to remove file out of staging AND undo changes")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# HEAD represents the latest commit")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout HEAD "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("changed_file\n\n")])])]),a("h2",{attrs:{id:"undo-changes-after-committing-in-local-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-changes-after-committing-in-local-git"}},[e._v("#")]),e._v(" Undo changes after committing in local git")]),e._v(" "),a("p",[e._v("To retain the changes in the staging region, but undo the latest commit (also known as soft reset):")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~1 means the previous commit")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--soft")]),e._v(" HEAD~1\n")])])]),a("p",[e._v("To undo the previous commit, and remove the changed file out of staging region (also known as mixed reset):")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" reset HEAD~1\n")])])]),a("p",[e._v("To undo the previous commit and changes (also known as hard reset):")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--hard")]),e._v(" HEAD~1\n")])])]),a("p",[e._v("The other way of undoing one or more commits is "),a("code",[e._v("git revert")]),e._v(". Unlike "),a("code",[e._v("git reset")]),e._v(", "),a("code",[e._v("git revert")]),e._v(" will add a new commit to revert the changes\nThe benefit of "),a("code",[e._v("git revert")]),e._v(" is it can revert any commit in the middle. And more importantly, "),a("code",[e._v("git revert")]),e._v(" can be used in a public branch.")])])}),[],!1,null,null,null);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{428:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("This post documents how to make presentations just using Markdown and Revealjs")])]),t._v(" "),a("h2",{attrs:{id:"background"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[t._v("#")]),t._v(" Background")]),t._v(" "),a("p",[t._v("Writing")]),t._v(" "),a("p",[t._v("However, with Neovim 0.5.0 and after, the native language server support makes it a great vscode replacement. I like it better even on Windows because it's just so natural to directly open any file or scripts from the terminal. With Neovim and its language server support, it becomes a perfect combination of VIM's legendary text editor and a universal light IDE.")]),t._v(" "),a("p",[t._v("I also transit to Lua for Neovim's configuration from classic vimscript. Lua is such an efficient and elegant scripting language. It took me a while to understand how to configue Neovim's LSP and Auto-completion. But thanks to the tutorial from LunarVim's "),a("a",{attrs:{href:"https://github.com/LunarVim/Neovim-from-scratch",target:"_blank",rel:"noopener noreferrer"}},[t._v('"Neovim-from-scratch"'),a("OutboundLink")],1),t._v(", I was finally able to bring my Neovim configuration to a level that I enjoy using as my daily editor.")]),t._v(" "),a("h2",{attrs:{id:"installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),a("p",[t._v("Neovim is open source so you can download it from its official "),a("a",{attrs:{href:"https://neovim.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Repository"),a("OutboundLink")],1),t._v(" for different environments. I use "),a("a",{attrs:{href:"https://scoop.sh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scoop"),a("OutboundLink")],1),t._v(" to install most of my software on my Windows machines. Simply:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("scoop install neovim\n")])])]),a("h2",{attrs:{id:"folder-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#folder-structure"}},[t._v("#")]),t._v(" Folder Structure")]),t._v(" "),a("p",[t._v("Depending on how you installed Neovim, the Neovim binary files will be installed to your normal software folders. Inside the folder, there will also be a Neovim GUI application but I usually just use "),a("code",[t._v("nvim")]),t._v(" command in my terminal to launch Neovim. In some situation, if your terminal doesn't recognize "),a("code",[t._v("nvim")]),t._v(" as a command, it is due to the binary file location not added to the your system's PATH.")]),t._v(" "),a("p",[t._v("You should never worry to mess with your Neovim binary folder because the configuration you are going to deal with will live in your user folder. In Windows, it is usually located in "),a("code",[t._v("C:\\Users\\YOURUSERNAME\\AppData\\Local\\Nvim")]),t._v(". In addition, a data folder will also be created at some point in "),a("code",[t._v("C:\\Users\\YOURUSERNAME\\AppData\\Local\\Nvim-data")]),t._v(". The plugins will usually live in this data folder but you will probably not need to worry about it either because your plugin manager will usually take care of it.")]),t._v(" "),a("p",[t._v("Here is my Neovim configuration folder structure:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("nvim\n│   init.lua\n│   Readme.md\n│\n├───lua\n│   │   keymappings.lua\n│   │   lsp.lua\n│   │   myConfigs.vim\n│   │   nvim-cmp.lua\n│   │   options.lua\n│   │   plugins.lua\n│   │   treesitter.lua\n│   │\n│   └───lsp\n│           js-ts-ls.lua\n│           json-ls.lua\n│           lua-ls.lua\n│           python-ls.lua\n│           sumneko_lua.lua\n│\n└───plugin\n        packer_compiled.lua\n")])])]),a("h2",{attrs:{id:"configurations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configurations"}},[t._v("#")]),t._v(" Configurations")]),t._v(" "),a("p",[t._v("I have a handful of Lua files and a vim file (which I will eventually migrate to Lua as well) for my personal configuration. You could have them all in one single "),a("code",[t._v("init.lua")]),t._v(" file similar to what I used to have for VIM in a single _vimrc.")]),t._v(" "),a("ul",[a("li",[t._v("init.lua: This is the main entry point for all configurations. It simply requires (which is the Lua way of saying references) other config files. It looks like this:")])]),t._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugins"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"options"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keymappings"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lsp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nvim-cmp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nvim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),t._v(" vim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stdpath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"config"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/lua/myConfigs.vim"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v('lua/options.lua: This file is for regular neovim options/preferences. You can think of this being the "preference" or "options" menu in most of the windows software where you can choose different start-up options that you want your Neovim to behave.')])]),t._v(" "),a("li",[a("p",[t._v('lua/keymappings.lua: This file is for all custom keybindings. VIM/Neovim has an extremely powerful keybindings system but you will find certain bindings not worrking as conveniently as you would like it to be. For example, for someone like me spending most of our life on Windows machines, Ctrl-v to paste text has just became the muscle memory. While I kept using VIM\'s native paste "p" in normal mode, I have my own keymappings to use Ctrl-v in both insert mode and command mode.')])]),t._v(" "),a("li",[a("p",[t._v("lua/plugins.lua: This is where I keep all my plugins. As all plugins are directly installed from the Github repository, it became so easy to maintain and control them in a few lines of code.")])]),t._v(" "),a("li",[a("p",[t._v('lua/lsp.lua: I use this file for language server configurations. It used to be confusing to install and maintain different LSPs with Neovim. But now with the plugin "nvim-lsp-installer", things have become much easier to follow.')])]),t._v(" "),a("li",[a("p",[t._v('lua/nvim-cmp: This is also somewhat LSP related. It controls auto-completion settings from a variaty of plugins from the "nvim-comp" family. This is such a big life quality improvement. It not only auto completes your coding like any other IDE. It also helps tremendously with the spelling when writing English for someone like me who isn\'t a native speaker.')])]),t._v(" "),a("li",[a("p",[t._v("lua/lsp/*: I reserved this folder for keeping language server specific settings.")])])]),t._v(" "),a("h2",{attrs:{id:"plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[t._v("#")]),t._v(" Plugins")]),t._v(" "),a("p",[t._v("I use a dozen of plugins. They can be categorized into the following:")]),t._v(" "),a("ol",[a("li",[t._v("Theming and cosmetic:")])]),t._v(" "),a("ul",[a("li",[t._v("vim-github-colorscheme")]),t._v(" "),a("li",[t._v("onedark.vim")]),t._v(" "),a("li",[t._v("nightfox.vim")]),t._v(" "),a("li",[t._v("vim-airline")]),t._v(" "),a("li",[t._v("vim-airline-themes")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Easier navigation")])]),t._v(" "),a("ul",[a("li",[t._v("nerdtree")]),t._v(" "),a("li",[t._v("vim-sneak")]),t._v(" "),a("li",[t._v("vim-surround")]),t._v(" "),a("li",[t._v("auto-pairs")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("For documentation and note taking")])]),t._v(" "),a("ul",[a("li",[t._v("vimwiki")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("For programming")])]),t._v(" "),a("ul",[a("li",[t._v("nvim-lspconfig")]),t._v(" "),a("li",[t._v("nvim-lsp-installer")]),t._v(" "),a("li",[t._v("null-ls.nvim")]),t._v(" "),a("li",[t._v("nvim-cmp family")])]),t._v(" "),a("h2",{attrs:{id:"other-customizations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-customizations"}},[t._v("#")]),t._v(" Other customizations")]),t._v(" "),a("p",[t._v("Except for the customized key mappings that I like to use, I also have the following customizations.")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[t._v("cnoremap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("C"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("esubstitute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^\\s*\\('")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("escape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substitute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("&"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("commentstring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%s.*$'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\)*\\s*:*'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("When you are in the command mode, you can press alt-v to paste the current line in the command.")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("autocmd")]),t._v(" FileType "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("python")]),t._v(" nnoremap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("buffer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("F5"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("python")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("I like to use F5. This command will directly run your python file in the terminal with one key stroke.")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("autocmd")]),t._v(" bufenter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("md "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("noremap")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("silent")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("f5"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" start msedge "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%:p"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("cr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Again, use F5 to display the current markdown file in the browser, where I have an extension installed to render the markdown.")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[t._v("augroup clear_trailing\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("autocmd")]),t._v(" BufWritePre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" &"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ft")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vimwiki"')]),t._v(" | "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\s\\"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("e")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("autocmd")]),t._v(" BufWritePre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" &"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ft")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vimwiki"')]),t._v(" | "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("n")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("e")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("autocmd")]),t._v(" BufwritePre "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("noh")]),t._v("\naugroup END\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);